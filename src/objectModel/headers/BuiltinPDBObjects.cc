// Auto-generated by code in SConstruct

// first, record all of the type codes
objectTypeNamesList [getTypeName <Ack> ()] = 3;
objectTypeNamesList [getTypeName <AggregationJobStage> ()] = 4;
objectTypeNamesList [getTypeName <AggregationMap<Nothing>> ()] = 5;
objectTypeNamesList [getTypeName <Array <Nothing>> ()] = 6;
objectTypeNamesList [getTypeName <Avg> ()] = 7;
objectTypeNamesList [getTypeName <AvgResult> ()] = 8;
objectTypeNamesList [getTypeName <BackendExecuteSelection> ()] = 9;
objectTypeNamesList [getTypeName <BackendTestSetCopy> ()] = 10;
objectTypeNamesList [getTypeName <BackendTestSetScan> ()] = 11;
objectTypeNamesList [getTypeName <BaseQuery> ()] = 12;
objectTypeNamesList [getTypeName <BroadcastJoinBuildHTJobStage> ()] = 13;
objectTypeNamesList [getTypeName <BuiltinKMeansQuery> ()] = 14;
objectTypeNamesList [getTypeName <BuiltinPartialResult> ()] = 15;
objectTypeNamesList [getTypeName <CatAddNodeToDatabaseRequest> ()] = 16;
objectTypeNamesList [getTypeName <CatAddNodeToSetRequest> ()] = 17;
objectTypeNamesList [getTypeName <CatCreateDatabaseRequest> ()] = 18;
objectTypeNamesList [getTypeName <CatCreateSetRequest> ()] = 19;
objectTypeNamesList [getTypeName <CatDeleteDatabaseRequest> ()] = 20;
objectTypeNamesList [getTypeName <CatDeleteSetRequest> ()] = 21;
objectTypeNamesList [getTypeName <CatRegisterType> ()] = 22;
objectTypeNamesList [getTypeName <CatRemoveNodeFromDatabaseRequest> ()] = 23;
objectTypeNamesList [getTypeName <CatRemoveNodeFromSetRequest> ()] = 24;
objectTypeNamesList [getTypeName <CatSetObjectTypeRequest> ()] = 25;
objectTypeNamesList [getTypeName <CatSharedLibraryByNameRequest> ()] = 26;
objectTypeNamesList [getTypeName <CatSharedLibraryRequest> ()] = 27;
objectTypeNamesList [getTypeName <CatSharedLibraryResult> ()] = 28;
objectTypeNamesList [getTypeName <CatTypeNameSearch> ()] = 29;
objectTypeNamesList [getTypeName <CatTypeNameSearchResult> ()] = 30;
objectTypeNamesList [getTypeName <CatTypeSearchResult> ()] = 31;
objectTypeNamesList [getTypeName <CatalogCloseSQLiteDBHandler> ()] = 32;
objectTypeNamesList [getTypeName <CatalogDatabaseMetadata> ()] = 33;
objectTypeNamesList [getTypeName <CatalogNodeMetadata> ()] = 34;
objectTypeNamesList [getTypeName <CatalogPermissionsMetadata> ()] = 35;
objectTypeNamesList [getTypeName <CatalogPrintMetadata> ()] = 36;
objectTypeNamesList [getTypeName <CatalogSetMetadata> ()] = 37;
objectTypeNamesList [getTypeName <CatalogUserTypeMetadata> ()] = 38;
objectTypeNamesList [getTypeName <CheckEmployee> ()] = 39;
objectTypeNamesList [getTypeName <CloseConnection> ()] = 40;
objectTypeNamesList [getTypeName <ComputePlan> ()] = 41;
objectTypeNamesList [getTypeName <Count> ()] = 42;
objectTypeNamesList [getTypeName <DeleteSet> ()] = 43;
objectTypeNamesList [getTypeName <DepartmentEmployeeAges> ()] = 44;
objectTypeNamesList [getTypeName <DepartmentEmployees> ()] = 45;
objectTypeNamesList [getTypeName <DepartmentTotal> ()] = 46;
objectTypeNamesList [getTypeName <DispatcherAddData> ()] = 47;
objectTypeNamesList [getTypeName <DispatcherRegisterPartitionPolicy> ()] = 48;
objectTypeNamesList [getTypeName <DistributedStorageAddDatabase> ()] = 49;
objectTypeNamesList [getTypeName <DistributedStorageAddSet> ()] = 50;
objectTypeNamesList [getTypeName <DistributedStorageAddTempSet> ()] = 51;
objectTypeNamesList [getTypeName <DistributedStorageCleanup> ()] = 52;
objectTypeNamesList [getTypeName <DistributedStorageClearSet> ()] = 53;
objectTypeNamesList [getTypeName <DistributedStorageExportSet> ()] = 54;
objectTypeNamesList [getTypeName <DistributedStorageRemoveDatabase> ()] = 55;
objectTypeNamesList [getTypeName <DistributedStorageRemoveHashSet> ()] = 56;
objectTypeNamesList [getTypeName <DistributedStorageRemoveSet> ()] = 57;
objectTypeNamesList [getTypeName <DistributedStorageRemoveTempSet> ()] = 58;
objectTypeNamesList [getTypeName <DoneWithResult> ()] = 59;
objectTypeNamesList [getTypeName <DoubleSumResult> ()] = 60;
objectTypeNamesList [getTypeName <DoubleVector> ()] = 61;
objectTypeNamesList [getTypeName <DoubleVectorResult> ()] = 62;
objectTypeNamesList [getTypeName <Employee> ()] = 63;
objectTypeNamesList [getTypeName <ExecuteComputation> ()] = 64;
objectTypeNamesList [getTypeName <ExecuteQuery> ()] = 65;
objectTypeNamesList [getTypeName <FilterOperator> ()] = 66;
objectTypeNamesList [getTypeName <GenericBlock> ()] = 67;
objectTypeNamesList [getTypeName <GetListOfNodes> ()] = 68;
objectTypeNamesList [getTypeName <HashPartitionedJoinBuildHTJobStage> ()] = 69;
objectTypeNamesList [getTypeName <Holder<Nothing>> ()] = 70;
objectTypeNamesList [getTypeName <JobStage> ()] = 71;
objectTypeNamesList [getTypeName <JoinMap <Nothing>> ()] = 72;
objectTypeNamesList [getTypeName <JoinPairArray <Nothing>> ()] = 73;
objectTypeNamesList [getTypeName <KMeansDoubleVector> ()] = 74;
objectTypeNamesList [getTypeName <KeepGoing> ()] = 75;
objectTypeNamesList [getTypeName <LambdaIdentifier> ()] = 76;
objectTypeNamesList [getTypeName <ListOfNodes> ()] = 77;
objectTypeNamesList [getTypeName <Map <Nothing>> ()] = 78;
objectTypeNamesList [getTypeName <MyEmployee> ()] = 79;
objectTypeNamesList [getTypeName <NodeDispatcherData> ()] = 80;
objectTypeNamesList [getTypeName <NodeInfo> ()] = 81;
objectTypeNamesList [getTypeName <Nothing> ()] = 82;
objectTypeNamesList [getTypeName <Object> ()] = 83;
objectTypeNamesList [getTypeName <OptimizedDepartmentEmployees> ()] = 84;
objectTypeNamesList [getTypeName <OptimizedEmployee> ()] = 85;
objectTypeNamesList [getTypeName <OptimizedSupervisor> ()] = 86;
objectTypeNamesList [getTypeName <PairArray <Nothing>> ()] = 87;
objectTypeNamesList [getTypeName <PlaceOfQueryPlanner> ()] = 88;
objectTypeNamesList [getTypeName <ProjectionOperator> ()] = 89;
objectTypeNamesList [getTypeName <QueriesAndPlan> ()] = 90;
objectTypeNamesList [getTypeName <QueryDone> ()] = 91;
objectTypeNamesList [getTypeName <QueryOutput <Nothing>> ()] = 92;
objectTypeNamesList [getTypeName <QueryPermit> ()] = 93;
objectTypeNamesList [getTypeName <QueryPermitResponse> ()] = 94;
objectTypeNamesList [getTypeName <RequestResources> ()] = 95;
objectTypeNamesList [getTypeName <ResourceInfo> ()] = 96;
objectTypeNamesList [getTypeName <ScanDoubleVectorSet> ()] = 97;
objectTypeNamesList [getTypeName <ScanUserSet <Nothing>> ()] = 98;
objectTypeNamesList [getTypeName <Set <Nothing>> ()] = 99;
objectTypeNamesList [getTypeName <SetIdentifier> ()] = 100;
objectTypeNamesList [getTypeName <SetScan> ()] = 101;
objectTypeNamesList [getTypeName <ShutDown> ()] = 102;
objectTypeNamesList [getTypeName <SimpleRequestResult> ()] = 103;
objectTypeNamesList [getTypeName <StorageAddData> ()] = 104;
objectTypeNamesList [getTypeName <StorageAddDatabase> ()] = 105;
objectTypeNamesList [getTypeName <StorageAddObject> ()] = 106;
objectTypeNamesList [getTypeName <StorageAddObjectInLoop> ()] = 107;
objectTypeNamesList [getTypeName <StorageAddSet> ()] = 108;
objectTypeNamesList [getTypeName <StorageAddTempSet> ()] = 109;
objectTypeNamesList [getTypeName <StorageAddTempSetResult> ()] = 110;
objectTypeNamesList [getTypeName <StorageAddType> ()] = 111;
objectTypeNamesList [getTypeName <StorageBytesPinned> ()] = 112;
objectTypeNamesList [getTypeName <StorageCleanup> ()] = 113;
objectTypeNamesList [getTypeName <StorageClearSet> ()] = 114;
objectTypeNamesList [getTypeName <StorageCollectStats> ()] = 115;
objectTypeNamesList [getTypeName <StorageCollectStatsResponse> ()] = 116;
objectTypeNamesList [getTypeName <StorageExportSet> ()] = 117;
objectTypeNamesList [getTypeName <StorageGetData> ()] = 118;
objectTypeNamesList [getTypeName <StorageGetDataResponse> ()] = 119;
objectTypeNamesList [getTypeName <StorageGetSetPages> ()] = 120;
objectTypeNamesList [getTypeName <StorageGetStats> ()] = 121;
objectTypeNamesList [getTypeName <StorageNoMorePage> ()] = 122;
objectTypeNamesList [getTypeName <StoragePagePinned> ()] = 123;
objectTypeNamesList [getTypeName <StoragePinBytes> ()] = 124;
objectTypeNamesList [getTypeName <StoragePinPage> ()] = 125;
objectTypeNamesList [getTypeName <StorageRemoveDatabase> ()] = 126;
objectTypeNamesList [getTypeName <StorageRemoveHashSet> ()] = 127;
objectTypeNamesList [getTypeName <StorageRemoveTempSet> ()] = 128;
objectTypeNamesList [getTypeName <StorageRemoveUserSet> ()] = 129;
objectTypeNamesList [getTypeName <StorageTestSetCopy> ()] = 130;
objectTypeNamesList [getTypeName <StorageTestSetScan> ()] = 131;
objectTypeNamesList [getTypeName <StorageUnpinPage> ()] = 132;
objectTypeNamesList [getTypeName <StringIntPair> ()] = 133;
objectTypeNamesList [getTypeName <SumResult> ()] = 134;
objectTypeNamesList [getTypeName <Supervisor> ()] = 135;
objectTypeNamesList [getTypeName <TopKQueue <Nothing>> ()] = 136;
objectTypeNamesList [getTypeName <TupleSetExecuteQuery> ()] = 137;
objectTypeNamesList [getTypeName <TupleSetJobStage> ()] = 138;
objectTypeNamesList [getTypeName <Vector <Nothing>> ()] = 139;
objectTypeNamesList [getTypeName <WriteUserSet <Nothing>> ()] = 140;
objectTypeNamesList [getTypeName <ZB_Company> ()] = 141;

// now, record all of the vTables
{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		Ack tempObject;
		allVTables [3] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Ack to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		AggregationJobStage tempObject;
		allVTables [4] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate AggregationJobStage to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		AggregationMap<Nothing> tempObject;
		allVTables [5] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate AggregationMap<Nothing> to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		Array <Nothing> tempObject;
		allVTables [6] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Array <Nothing> to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		Avg tempObject;
		allVTables [7] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Avg to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		AvgResult tempObject;
		allVTables [8] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate AvgResult to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		BackendExecuteSelection tempObject;
		allVTables [9] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate BackendExecuteSelection to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		BackendTestSetCopy tempObject;
		allVTables [10] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate BackendTestSetCopy to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		BackendTestSetScan tempObject;
		allVTables [11] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate BackendTestSetScan to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		BaseQuery tempObject;
		allVTables [12] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate BaseQuery to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		BroadcastJoinBuildHTJobStage tempObject;
		allVTables [13] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate BroadcastJoinBuildHTJobStage to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		BuiltinKMeansQuery tempObject;
		allVTables [14] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate BuiltinKMeansQuery to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		BuiltinPartialResult tempObject;
		allVTables [15] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate BuiltinPartialResult to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatAddNodeToDatabaseRequest tempObject;
		allVTables [16] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatAddNodeToDatabaseRequest to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatAddNodeToSetRequest tempObject;
		allVTables [17] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatAddNodeToSetRequest to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatCreateDatabaseRequest tempObject;
		allVTables [18] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatCreateDatabaseRequest to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatCreateSetRequest tempObject;
		allVTables [19] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatCreateSetRequest to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatDeleteDatabaseRequest tempObject;
		allVTables [20] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatDeleteDatabaseRequest to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatDeleteSetRequest tempObject;
		allVTables [21] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatDeleteSetRequest to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatRegisterType tempObject;
		allVTables [22] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatRegisterType to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatRemoveNodeFromDatabaseRequest tempObject;
		allVTables [23] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatRemoveNodeFromDatabaseRequest to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatRemoveNodeFromSetRequest tempObject;
		allVTables [24] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatRemoveNodeFromSetRequest to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatSetObjectTypeRequest tempObject;
		allVTables [25] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatSetObjectTypeRequest to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatSharedLibraryByNameRequest tempObject;
		allVTables [26] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatSharedLibraryByNameRequest to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatSharedLibraryRequest tempObject;
		allVTables [27] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatSharedLibraryRequest to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatSharedLibraryResult tempObject;
		allVTables [28] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatSharedLibraryResult to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatTypeNameSearch tempObject;
		allVTables [29] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatTypeNameSearch to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatTypeNameSearchResult tempObject;
		allVTables [30] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatTypeNameSearchResult to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatTypeSearchResult tempObject;
		allVTables [31] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatTypeSearchResult to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatalogCloseSQLiteDBHandler tempObject;
		allVTables [32] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatalogCloseSQLiteDBHandler to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatalogDatabaseMetadata tempObject;
		allVTables [33] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatalogDatabaseMetadata to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatalogNodeMetadata tempObject;
		allVTables [34] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatalogNodeMetadata to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatalogPermissionsMetadata tempObject;
		allVTables [35] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatalogPermissionsMetadata to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatalogPrintMetadata tempObject;
		allVTables [36] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatalogPrintMetadata to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatalogSetMetadata tempObject;
		allVTables [37] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatalogSetMetadata to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CatalogUserTypeMetadata tempObject;
		allVTables [38] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CatalogUserTypeMetadata to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CheckEmployee tempObject;
		allVTables [39] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CheckEmployee to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		CloseConnection tempObject;
		allVTables [40] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CloseConnection to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		ComputePlan tempObject;
		allVTables [41] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate ComputePlan to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		Count tempObject;
		allVTables [42] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Count to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DeleteSet tempObject;
		allVTables [43] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DeleteSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DepartmentEmployeeAges tempObject;
		allVTables [44] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DepartmentEmployeeAges to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DepartmentEmployees tempObject;
		allVTables [45] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DepartmentEmployees to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DepartmentTotal tempObject;
		allVTables [46] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DepartmentTotal to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DispatcherAddData tempObject;
		allVTables [47] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DispatcherAddData to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DispatcherRegisterPartitionPolicy tempObject;
		allVTables [48] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DispatcherRegisterPartitionPolicy to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DistributedStorageAddDatabase tempObject;
		allVTables [49] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DistributedStorageAddDatabase to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DistributedStorageAddSet tempObject;
		allVTables [50] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DistributedStorageAddSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DistributedStorageAddTempSet tempObject;
		allVTables [51] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DistributedStorageAddTempSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DistributedStorageCleanup tempObject;
		allVTables [52] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DistributedStorageCleanup to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DistributedStorageClearSet tempObject;
		allVTables [53] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DistributedStorageClearSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DistributedStorageExportSet tempObject;
		allVTables [54] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DistributedStorageExportSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DistributedStorageRemoveDatabase tempObject;
		allVTables [55] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DistributedStorageRemoveDatabase to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DistributedStorageRemoveHashSet tempObject;
		allVTables [56] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DistributedStorageRemoveHashSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DistributedStorageRemoveSet tempObject;
		allVTables [57] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DistributedStorageRemoveSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DistributedStorageRemoveTempSet tempObject;
		allVTables [58] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DistributedStorageRemoveTempSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DoneWithResult tempObject;
		allVTables [59] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DoneWithResult to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DoubleSumResult tempObject;
		allVTables [60] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DoubleSumResult to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DoubleVector tempObject;
		allVTables [61] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DoubleVector to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		DoubleVectorResult tempObject;
		allVTables [62] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate DoubleVectorResult to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		Employee tempObject;
		allVTables [63] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Employee to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		ExecuteComputation tempObject;
		allVTables [64] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate ExecuteComputation to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		ExecuteQuery tempObject;
		allVTables [65] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate ExecuteQuery to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		FilterOperator tempObject;
		allVTables [66] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate FilterOperator to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		GenericBlock tempObject;
		allVTables [67] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate GenericBlock to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		GetListOfNodes tempObject;
		allVTables [68] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate GetListOfNodes to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		HashPartitionedJoinBuildHTJobStage tempObject;
		allVTables [69] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate HashPartitionedJoinBuildHTJobStage to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		Holder<Nothing> tempObject;
		allVTables [70] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Holder<Nothing> to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		JobStage tempObject;
		allVTables [71] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate JobStage to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		JoinMap <Nothing> tempObject;
		allVTables [72] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate JoinMap <Nothing> to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		JoinPairArray <Nothing> tempObject;
		allVTables [73] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate JoinPairArray <Nothing> to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		KMeansDoubleVector tempObject;
		allVTables [74] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate KMeansDoubleVector to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		KeepGoing tempObject;
		allVTables [75] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate KeepGoing to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		LambdaIdentifier tempObject;
		allVTables [76] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate LambdaIdentifier to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		ListOfNodes tempObject;
		allVTables [77] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate ListOfNodes to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		Map <Nothing> tempObject;
		allVTables [78] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Map <Nothing> to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		MyEmployee tempObject;
		allVTables [79] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate MyEmployee to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		NodeDispatcherData tempObject;
		allVTables [80] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate NodeDispatcherData to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		NodeInfo tempObject;
		allVTables [81] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate NodeInfo to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		Nothing tempObject;
		allVTables [82] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Nothing to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		Object tempObject;
		allVTables [83] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Object to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		OptimizedDepartmentEmployees tempObject;
		allVTables [84] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate OptimizedDepartmentEmployees to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		OptimizedEmployee tempObject;
		allVTables [85] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate OptimizedEmployee to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		OptimizedSupervisor tempObject;
		allVTables [86] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate OptimizedSupervisor to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		PairArray <Nothing> tempObject;
		allVTables [87] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate PairArray <Nothing> to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		PlaceOfQueryPlanner tempObject;
		allVTables [88] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate PlaceOfQueryPlanner to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		ProjectionOperator tempObject;
		allVTables [89] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate ProjectionOperator to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		QueriesAndPlan tempObject;
		allVTables [90] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate QueriesAndPlan to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		QueryDone tempObject;
		allVTables [91] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate QueryDone to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		QueryOutput <Nothing> tempObject;
		allVTables [92] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate QueryOutput <Nothing> to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		QueryPermit tempObject;
		allVTables [93] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate QueryPermit to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		QueryPermitResponse tempObject;
		allVTables [94] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate QueryPermitResponse to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		RequestResources tempObject;
		allVTables [95] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate RequestResources to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		ResourceInfo tempObject;
		allVTables [96] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate ResourceInfo to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		ScanDoubleVectorSet tempObject;
		allVTables [97] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate ScanDoubleVectorSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		ScanUserSet <Nothing> tempObject;
		allVTables [98] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate ScanUserSet <Nothing> to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		Set <Nothing> tempObject;
		allVTables [99] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Set <Nothing> to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		SetIdentifier tempObject;
		allVTables [100] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate SetIdentifier to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		SetScan tempObject;
		allVTables [101] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate SetScan to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		ShutDown tempObject;
		allVTables [102] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate ShutDown to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		SimpleRequestResult tempObject;
		allVTables [103] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate SimpleRequestResult to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageAddData tempObject;
		allVTables [104] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageAddData to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageAddDatabase tempObject;
		allVTables [105] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageAddDatabase to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageAddObject tempObject;
		allVTables [106] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageAddObject to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageAddObjectInLoop tempObject;
		allVTables [107] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageAddObjectInLoop to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageAddSet tempObject;
		allVTables [108] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageAddSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageAddTempSet tempObject;
		allVTables [109] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageAddTempSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageAddTempSetResult tempObject;
		allVTables [110] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageAddTempSetResult to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageAddType tempObject;
		allVTables [111] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageAddType to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageBytesPinned tempObject;
		allVTables [112] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageBytesPinned to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageCleanup tempObject;
		allVTables [113] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageCleanup to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageClearSet tempObject;
		allVTables [114] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageClearSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageCollectStats tempObject;
		allVTables [115] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageCollectStats to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageCollectStatsResponse tempObject;
		allVTables [116] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageCollectStatsResponse to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageExportSet tempObject;
		allVTables [117] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageExportSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageGetData tempObject;
		allVTables [118] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageGetData to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageGetDataResponse tempObject;
		allVTables [119] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageGetDataResponse to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageGetSetPages tempObject;
		allVTables [120] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageGetSetPages to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageGetStats tempObject;
		allVTables [121] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageGetStats to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageNoMorePage tempObject;
		allVTables [122] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageNoMorePage to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StoragePagePinned tempObject;
		allVTables [123] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StoragePagePinned to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StoragePinBytes tempObject;
		allVTables [124] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StoragePinBytes to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StoragePinPage tempObject;
		allVTables [125] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StoragePinPage to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageRemoveDatabase tempObject;
		allVTables [126] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageRemoveDatabase to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageRemoveHashSet tempObject;
		allVTables [127] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageRemoveHashSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageRemoveTempSet tempObject;
		allVTables [128] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageRemoveTempSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageRemoveUserSet tempObject;
		allVTables [129] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageRemoveUserSet to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageTestSetCopy tempObject;
		allVTables [130] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageTestSetCopy to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageTestSetScan tempObject;
		allVTables [131] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageTestSetScan to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StorageUnpinPage tempObject;
		allVTables [132] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StorageUnpinPage to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		StringIntPair tempObject;
		allVTables [133] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate StringIntPair to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		SumResult tempObject;
		allVTables [134] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate SumResult to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		Supervisor tempObject;
		allVTables [135] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Supervisor to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		TopKQueue <Nothing> tempObject;
		allVTables [136] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate TopKQueue <Nothing> to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		TupleSetExecuteQuery tempObject;
		allVTables [137] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate TupleSetExecuteQuery to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		TupleSetJobStage tempObject;
		allVTables [138] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate TupleSetJobStage to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		Vector <Nothing> tempObject;
		allVTables [139] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Vector <Nothing> to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		WriteUserSet <Nothing> tempObject;
		allVTables [140] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate WriteUserSet <Nothing> to extract the vTable.\n";
	}
}

{
	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
	try {
		ZB_Company tempObject;
		allVTables [141] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate ZB_Company to extract the vTable.\n";
	}
}

