##########################
TcapIntermediaryRep Module
##########################

1.) Overview

    The TcapIntermediaryRep module provides classes to model TCAP instructions.

        <note put a reference here to the TCAP language spec when it is created>

    It is primarily used to create a more friendly representation of a TCAP program than the parse tree generated by
    the TcapParser module.  For example, the executorId appears as a field of each instruction instead of being
    an attribute node at some distant point from the instruction in the parse tree.


2.) Principle Function

    The principle function of interest for this module is:

         shared_ptr<vector<InstructionPtr>> buildTcapIr(TranslationUnit unit);

    as found in TcapBuilder.h which is used to create the TCAP data structures from the parse result of TcapPaser.

    An example of its usage would be:

        using std::shared_ptr;
        using std::string;
        using std::vector;
        using pdb::SafeResult;
        using pdb_detail::parseTcap;
        using pdb_detail:TranslationUnit;
        using pdb_detail::buildTcapIr;

        string program = "@exec \"exec1\"\n"
                         "A(student) = load \"(databaseName, inputSetName)\"";

        shared_ptr<SafeResult<TranslationUnit>> parseTreeResult = parseTcap(program);

        parseTreeResult->apply(
                [&](TranslationUnit parseTree)
                {
                    shared_ptr<vector<InstructionPtr>> instructions = buildTcapIr(parseTree);
                },
                [&](string errorMsg)
                {
                   // report an error
                }

3.) Design Notes

    Most instruction modeling classes (e.g. ApplyFunction, Filter, etc) do not have a public constructor.  This is
    because many of these constructors need to throw an exception if passed a nullptr reference and exception throwing
    functions must not be accessible across API boundaries in PDB by the coding style guide.

    For each of these such class a corresponding public factory function is provided that does not throw
    an exception that may be used for instance creation.  For example:

        ApplyFunctionPtr makeApplyFunction(...) // ApplyFunction.h
        FilterPtr makeFilter(...)               // Filter.h